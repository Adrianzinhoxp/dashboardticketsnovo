const express = require("express")
const cors = require("cors")
const path = require("path")
const helmet = require("helmet")
const compression = require("compression")
const fs = require("fs")

const app = express()
const PORT = process.env.PORT || 3000

// Middleware de seguran√ßa
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://fonts.googleapis.com"],
        scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.tailwindcss.com", "https://unpkg.com"],
        imgSrc: ["'self'", "data:", "https://", "blob:", "https://media.discordapp.net", "https://cdn.discordapp.com"],
        connectSrc: ["'self'"],
        fontSrc: ["'self'", "https:", "data:", "https://fonts.gstatic.com"],
      },
    },
  }),
)

app.use(compression())
app.use(cors())
app.use(express.json())

// Servir arquivos est√°ticos
app.use(express.static(path.join(__dirname, "public")))

// Dados simulados com as 3 categorias
const generateSampleTickets = () => {
  const categories = ["Up de Patente", "D√∫vidas", "Corregedoria"]
  const priorities = ["Cr√≠tica", "Alta", "M√©dia", "Baixa"]
  const officers = ["Oficial Santos", "Oficial Lima", "Oficial Silva", "Oficial Costa", "Oficial Pereira"]
  const users = [
    { name: "Jo√£o Silva", discriminator: "#1234" },
    { name: "Maria Santos", discriminator: "#5678" },
    { name: "Pedro Costa", discriminator: "#9012" },
    { name: "Ana Oliveira", discriminator: "#3456" },
    { name: "Carlos Lima", discriminator: "#7890" },
    { name: "Fernanda Souza", discriminator: "#2345" },
    { name: "Roberto Alves", discriminator: "#6789" },
    { name: "Juliana Ferreira", discriminator: "#0123" },
    { name: "Marcos Rodrigues", discriminator: "#4567" },
    { name: "Patr√≠cia Mendes", discriminator: "#8901" },
  ]

  const tickets = []

  for (let i = 1; i <= 150; i++) {
    const user = users[Math.floor(Math.random() * users.length)]
    const category = categories[Math.floor(Math.random() * categories.length)]
    const priority = priorities[Math.floor(Math.random() * priorities.length)]
    const officer = officers[Math.floor(Math.random() * officers.length)]

    const createdAt = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // √öltimos 30 dias
    const closedAt = new Date(createdAt.getTime() + Math.random() * 24 * 60 * 60 * 1000) // At√© 24h depois

    const duration = Math.floor((closedAt - createdAt) / (1000 * 60)) // em minutos
    const hours = Math.floor(duration / 60)
    const minutes = duration % 60

    tickets.push({
      id: `TK-${String(i).padStart(3, "0")}`,
      user: {
        name: user.name,
        avatar: `https://cdn.discordapp.com/embed/avatars/${i % 6}.png`,
        discriminator: user.discriminator,
      },
      category: category,
      closedAt: closedAt.toISOString(),
      duration: `${hours}h ${minutes}m`,
      closedBy: officer,
      priority: priority,
      satisfaction: Math.floor(Math.random() * 2) + 4, // 4 ou 5 estrelas
      channelId: `${1000000000000000000 + i}`,
      createdAt: createdAt.toISOString(),
    })
  }

  return tickets.sort((a, b) => new Date(b.closedAt) - new Date(a.closedAt))
}

const sampleTickets = generateSampleTickets()

// Rotas da API
app.get("/api/tickets/stats", (req, res) => {
  const today = new Date()
  today.setHours(0, 0, 0, 0)

  const todayTickets = sampleTickets.filter((ticket) => new Date(ticket.closedAt) >= today)

  const totalDuration = sampleTickets.reduce((sum, ticket) => {
    const duration = new Date(ticket.closedAt) - new Date(ticket.createdAt)
    return sum + duration
  }, 0)

  const avgDuration = sampleTickets.length > 0 ? totalDuration / sampleTickets.length : 0
  const avgHours = Math.floor(avgDuration / (1000 * 60 * 60))
  const avgMinutes = Math.floor((avgDuration % (1000 * 60 * 60)) / (1000 * 60))

  const avgSatisfaction =
    sampleTickets.length > 0
      ? sampleTickets.reduce((sum, ticket) => sum + (ticket.satisfaction || 0), 0) / sampleTickets.length
      : 0

  res.json({
    totalClosed: sampleTickets.length,
    todayClosed: todayTickets.length,
    avgResolutionTime: `${avgHours}h ${avgMinutes}m`,
    satisfactionRate: Math.round(avgSatisfaction * 10) / 10,
  })
})

app.get("/api/tickets/closed", (req, res) => {
  res.json(sampleTickets)
})

app.get("/api/tickets/:ticketId/messages", (req, res) => {
  const { ticketId } = req.params
  const ticket = sampleTickets.find((t) => t.id === ticketId)

  if (!ticket) {
    return res.status(404).json({ error: "Ticket n√£o encontrado" })
  }

  // Gerar conversas mais realistas e detalhadas
  const messages = []
  const messageTemplates = {
    "Up de Patente": [
      {
        user: "Ol√°! Gostaria de solicitar um up de patente. Estou h√° bastante tempo na corpora√ß√£o e acredito que mere√ßo uma promo√ß√£o. Tenho me dedicado muito e seguido todas as regras.",
        staff:
          "Ol√°! Obrigado por entrar em contato. Vou analisar sua solicita√ß√£o de promo√ß√£o. Para isso, preciso que voc√™ me envie algumas informa√ß√µes: tempo de servi√ßo, patente atual, e principais contribui√ß√µes para a corpora√ß√£o.",
        user2:
          "Claro! Estou na corpora√ß√£o h√° 3 meses, atualmente sou Soldado, e tenho participado ativamente das opera√ß√µes. Sempre cumpro os hor√°rios e ajudo outros membros quando necess√°rio.",
        staff2:
          "Perfeito! Vou verificar seu hist√≥rico no sistema. Suas informa√ß√µes est√£o corretas e seu comportamento tem sido exemplar. Ap√≥s an√°lise com a alta c√∫pula, sua promo√ß√£o foi aprovada! Parab√©ns, agora voc√™ √© Cabo. As altera√ß√µes j√° foram aplicadas no sistema.",
        user3:
          "Muito obrigado! Fico muito feliz com a promo√ß√£o. Continuarei me dedicando ainda mais para honrar essa nova patente. Voc√™s s√£o uma equipe incr√≠vel! üéâ",
      },
      {
        user: "Boa tarde! Venho solicitar respeitosamente um up de patente. Acredito ter cumprido todos os requisitos necess√°rios.",
        staff:
          "Boa tarde! Vou verificar sua solicita√ß√£o. Pode me informar h√° quanto tempo est√° na corpora√ß√£o e qual sua patente atual?",
        user2:
          "Estou h√° 2 meses e meio na corpora√ß√£o, sou Soldado atualmente. Tenho participado de todas as opera√ß√µes poss√≠veis e sempre respeitei a hierarquia.",
        staff2:
          "Analisando seu perfil... Vejo que voc√™ tem um bom hist√≥rico de participa√ß√£o. Sua promo√ß√£o foi aprovada! Agora voc√™ √© Cabo. Continue assim!",
        user3: "Excelente! Muito obrigado pela oportunidade. Prometo continuar dando o meu melhor! üí™",
      },
    ],
    D√∫vidas: [
      {
        user: "Ol√°! Tenho algumas d√∫vidas sobre o regulamento da corpora√ß√£o. Podem me ajudar?",
        staff:
          "Ol√°! Claro, ficarei feliz em esclarecer suas d√∫vidas. Qual ponto espec√≠fico do regulamento voc√™ gostaria de saber mais?",
        user2:
          "Gostaria de saber sobre os hor√°rios de opera√ß√£o, como funciona o sistema de faltas, e quais s√£o as puni√ß√µes por descumprimento de regras.",
        staff2:
          "√ìtimas perguntas! Sobre os hor√°rios: temos opera√ß√µes di√°rias √†s 20h e 22h. Faltas s√£o toleradas at√© 3 por m√™s, acima disso h√° advert√™ncia. As puni√ß√µes variam de advert√™ncia verbal at√© rebaixamento, dependendo da gravidade. Alguma d√∫vida espec√≠fica sobre esses pontos?",
        user3: "Perfeito! Esclareceu todas minhas d√∫vidas. Muito obrigado pela aten√ß√£o e paci√™ncia! üòä",
      },
      {
        user: "Oi! Sou novo na corpora√ß√£o e tenho d√∫vidas sobre como funciona o sistema de patentes.",
        staff:
          "Ol√°! Seja bem-vindo! O sistema de patentes funciona por tempo de servi√ßo e desempenho. Come√ßamos como Recruta, depois Soldado, Cabo, e assim por diante. Cada promo√ß√£o tem requisitos espec√≠ficos.",
        user2:
          "Entendi! E quanto tempo normalmente leva para subir de patente? Existe algum requisito especial al√©m do tempo?",
        staff2:
          "Geralmente leva de 1-2 meses entre promo√ß√µes, mas depende do seu desempenho, participa√ß√£o em opera√ß√µes, e comportamento. N√£o h√° requisitos especiais, apenas dedica√ß√£o e respeito √†s regras!",
        user3: "Muito obrigado pelas informa√ß√µes! Vou me esfor√ßar ao m√°ximo. Voc√™s s√£o muito atenciosos! üëç",
      },
    ],
    Corregedoria: [
      {
        user: "Preciso reportar uma situa√ß√£o que presenciei. Como devo proceder?",
        staff:
          "Ol√°! Obrigado por reportar. A corregedoria leva todas as den√∫ncias a s√©rio. Pode me dar mais detalhes sobre o ocorrido? Manteremos sigilo total sobre sua identidade.",
        user2:
          "Vi um membro da corpora√ß√£o agindo de forma inadequada durante uma opera√ß√£o, desrespeitando civis e n√£o seguindo os protocolos estabelecidos. Tenho prints como evid√™ncia.",
        staff2:
          "Entendo a gravidade da situa√ß√£o. Por favor, envie as evid√™ncias que possui. Vou encaminhar imediatamente para a corregedoria interna. O caso ser√° investigado com total seriedade e as medidas cab√≠veis ser√£o tomadas.",
        user3:
          "Obrigado pela aten√ß√£o. Enviei as evid√™ncias por DM. Espero que a situa√ß√£o seja resolvida adequadamente.",
      },
      {
        user: "Gostaria de fazer uma den√∫ncia an√¥nima sobre comportamento inadequado de um superior.",
        staff:
          "Ol√°! Todas as den√∫ncias s√£o tratadas com m√°xima seriedade e sigilo. Pode relatar o que aconteceu? Sua identidade ser√° protegida durante todo o processo.",
        user2:
          "Um superior tem abusado da autoridade, fazendo amea√ßas e criando um ambiente hostil. Outros membros tamb√©m est√£o incomodados mas t√™m medo de falar.",
        staff2:
          "Essa √© uma situa√ß√£o muito grave. Vou encaminhar imediatamente para a alta corregedoria. Ser√° aberta uma investiga√ß√£o sigilosa. Obrigado por ter a coragem de reportar. Situa√ß√µes assim n√£o s√£o toleradas em nossa corpora√ß√£o.",
        user3: "Agrade√ßo pela seriedade no tratamento. Espero que a situa√ß√£o seja resolvida para o bem de todos.",
      },
    ],
  }

  // Selecionar template baseado na categoria
  const templates = messageTemplates[ticket.category] || messageTemplates["D√∫vidas"]
  const selectedTemplate = templates[Math.floor(Math.random() * templates.length)]

  let messageId = 1
  const baseTime = new Date(ticket.createdAt).getTime()

  // Mensagem inicial do usu√°rio
  messages.push({
    id: `msg-${messageId++}`,
    author: {
      name: ticket.user.name,
      avatar: ticket.user.avatar,
      isStaff: false,
    },
    content: selectedTemplate.user,
    timestamp: new Date(baseTime).toISOString(),
    attachments: [],
  })

  // Resposta do staff
  messages.push({
    id: `msg-${messageId++}`,
    author: {
      name: ticket.closedBy,
      avatar: "https://cdn.discordapp.com/embed/avatars/1.png",
      isStaff: true,
    },
    content: selectedTemplate.staff,
    timestamp: new Date(baseTime + 5 * 60 * 1000).toISOString(),
    attachments: [],
  })

  // Segunda mensagem do usu√°rio (se existir)
  if (selectedTemplate.user2) {
    messages.push({
      id: `msg-${messageId++}`,
      author: {
        name: ticket.user.name,
        avatar: ticket.user.avatar,
        isStaff: false,
      },
      content: selectedTemplate.user2,
      timestamp: new Date(baseTime + 10 * 60 * 1000).toISOString(),
      attachments:
        ticket.category === "Corregedoria"
          ? [
              {
                name: "evidencia.png",
                url: "https://via.placeholder.com/300x200/667eea/ffffff?text=Evid√™ncia",
                type: "image",
              },
            ]
          : [],
    })
  }

  // Segunda resposta do staff (se existir)
  if (selectedTemplate.staff2) {
    messages.push({
      id: `msg-${messageId++}`,
      author: {
        name: ticket.closedBy,
        avatar: "https://cdn.discordapp.com/embed/avatars/1.png",
        isStaff: true,
      },
      content: selectedTemplate.staff2,
      timestamp: new Date(baseTime + 20 * 60 * 1000).toISOString(),
      attachments: [],
    })
  }

  // Mensagem final do usu√°rio (se existir)
  if (selectedTemplate.user3) {
    messages.push({
      id: `msg-${messageId++}`,
      author: {
        name: ticket.user.name,
        avatar: ticket.user.avatar,
        isStaff: false,
      },
      content: selectedTemplate.user3,
      timestamp: new Date(new Date(ticket.closedAt).getTime() - 2 * 60 * 1000).toISOString(),
      attachments: [],
    })
  }

  res.json(messages)
})

// Rota principal
app.get("/", (req, res) => {
  const indexPath = path.join(__dirname, "public", "index.html")

  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath)
  } else {
    res.send(`
      <h1>Dashboard de Tickets</h1>
      <p>Arquivo index.html n√£o encontrado. Verifique a estrutura de arquivos.</p>
      <p>Caminho esperado: ${indexPath}</p>
    `)
  }
})

// Health check
app.get("/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    tickets: sampleTickets.length,
  })
})

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
  console.error("Erro no servidor:", err)
  res.status(500).json({
    success: false,
    error: "Erro interno do servidor",
  })
})

// Middleware para rotas n√£o encontradas
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: "Rota n√£o encontrada",
  })
})

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`üöÄ Dashboard rodando em http://localhost:${PORT}`)
  console.log(`üìä API dispon√≠vel em http://localhost:${PORT}/api/tickets/closed`)
  console.log(`üé´ Total de tickets de exemplo: ${sampleTickets.length}`)
  console.log(`üè∑Ô∏è Categorias: Up de Patente, D√∫vidas, Corregedoria`)
  console.log(`üåç Ambiente: ${process.env.NODE_ENV || "development"}`)
})

// Tratamento de erros do processo
process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Unhandled Rejection at:", promise, "reason:", reason)
})

process.on("uncaughtException", (error) => {
  console.error("‚ùå Uncaught Exception:", error)
  process.exit(1)
})

module.exports = app
